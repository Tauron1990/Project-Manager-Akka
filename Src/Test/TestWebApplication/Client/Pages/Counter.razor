@page "/counter"
@using Stl.Fusion.UI
@using System.Threading
@inherits ComputedStateComponent<int>

@inject ICounterService _counterService
@inject IMutableState<string> _keyProvider
@inject IUICommandTracker _commandTracker;

<h1>Counter</h1>

@if (State.HasError)
{
    <p>@State.Error?.ToString()</p>
}
else
{
    <p>Current count: @State.ValueOrDefault</p>
}

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {

    private async Task IncrementCount() => await _counterService.Increment(new IncrementCommand(_keyProvider.Value));

    protected override void ConfigureState(ComputedState<int>.Options options)
    {
        base.ConfigureState(options);
        options.UpdateDelayer = new UpdateDelayer(_commandTracker, 0);
    }

    protected override async Task<int> ComputeState(CancellationToken cancellationToken)
    {
        var key = await _keyProvider.Use(cancellationToken);
        return await _counterService.GetCounter(key, cancellationToken);
    }

}