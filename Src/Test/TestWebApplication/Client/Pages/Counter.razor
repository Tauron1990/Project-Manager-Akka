@page "/counter"

@using System.Threading
@inherits ComputedStateComponent<int>

@inject ICounterService _counterService;
@inject IMutableState<string> _keyProvider;

<h1>Counter</h1>

@if (@State.HasError)
{
    <p>@State.Error?.ToString()</p>
}
else
{
    <p>Current count: @State.ValueOrDefault</p>
}

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private async Task IncrementCount() 
        => await _counterService.Increment(new IncrementCommand(_keyProvider.Value));

    protected override async Task<int> ComputeState(CancellationToken cancellationToken)
    {
        var key = await _keyProvider.Use(cancellationToken);
        return await _counterService.GetCounter(key, cancellationToken);
    }
}
