@typeparam TValue
@using System.Reactive.Disposables
@using Stl.Fusion
@implements IDisposable

@{
    var error = State?.Error;
    var value = State != null ? State.ValueOrDefault : default;
    var isLoading = State == null || _isInitial || State.Computed.ConsistencyState != ConsistencyState.Consistent || !State.HasValue; //|| value == null;

    #if DEBUG
    if (error != null)
        Console.WriteLine(error.ToString());
    #endif
}

@if (error != null)
{
    @if (Error != null)
    {
        @Error(error)
    }
    else
    {
        <CenterElement>
            <MudText>Ein fehler ist Aufgetreten:</MudText>
            <MudText>@error.Message</MudText>
        </CenterElement>
    }
}
else if (isLoading)
{
    @if (Loading != null)
    {
        @Loading
    }
    else
    {
        <GenericLoadingElement/>
    }
}
else
{
    @ChildContent(value)
}

@code {

    private IDisposable _subscription = Disposable.Empty;

    private bool _isInitial = true;

    [Parameter]
    public IState<TValue>? State { get; set; }

    [Parameter]
    public RenderFragment<TValue?> ChildContent { get; set; } = _ => _ => { };

    [Parameter]
    public RenderFragment<Exception>? Error { get; set; }

    [Parameter]
    public RenderFragment? Loading { get; set; }

    protected override void OnParametersSet()
    {
        _subscription.Dispose();

        if (State == null)
            _subscription = Disposable.Empty;
        else
        {
            State.AddEventHandler(StateEventKind.All, Handler);
            _subscription = Disposable.Create(State, state => state.RemoveEventHandler(StateEventKind.All, Handler));
        }
        base.OnParametersSet();
    }

    private void Handler(IState<TValue> arg1, StateEventKind arg2)
    {
        _isInitial = false;
        InvokeAsync(StateHasChanged).Ignore();
    }

    public void Dispose()
        => _subscription.Dispose();

}