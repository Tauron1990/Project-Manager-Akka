@using SimpleProjectManager.Client.Shared.CurrentJobs;

@page "/"

@inherits ComputedStateComponent<JobInfo[]>
@implements IDisposable

@inject NavigationManager _navigationManager
@inject IStateFactory _stateFactory
@inject IJobDatabaseService _jobService
@inject JobsViewModel _model

<PageTitle>Aktuelle Aufträge</PageTitle>

<StateAwaiter State="State">
    @if (context == null || context.Length == 0)
    {
        <MudGrid Justify="Justify.Center">
            <MudItem lg="12">
                <MudText Align="Align.Center" Typo="Typo.h1">Keine Aufträge</MudText>
            </MudItem>
            <MudItem lg="5"/>
            <MudItem lg="2">
                <MudButton StartIcon="@Icons.Filled.NewLabel" OnClick="@(() => _navigationManager.NavigateTo("/NewJob"))" Class="align-center">Neuer Auftrag</MudButton>
            </MudItem>
            <MudItem lg="5"/>
        </MudGrid>
    }
    else
    {
        <MudGrid>
            <MudItem lg="3">
                <JobSideBar CurrentJobs="context" Model="_model"/>
            </MudItem>
            <MudItem lg="9">
                <JobDetailDisplay/>
            </MudItem>
        </MudGrid>
    }
</StateAwaiter>

@code {

    protected override async Task<JobInfo[]> ComputeState(CancellationToken cancellationToken) 
        => await _jobService.GetActiveJobs(cancellationToken);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        State.AddEventHandler(StateEventKind.Updated, (_, _) => NewJobs());
    }

    private void NewJobs()
    {
        var jobs = State.ValueOrDefault;
        if(jobs == null || _model.Current == null) return;

        if(!jobs.Contains(_model.Current.Info))
            _model.Publish(null);

    }

    public void Dispose()
        => _model?.Dispose();

}


