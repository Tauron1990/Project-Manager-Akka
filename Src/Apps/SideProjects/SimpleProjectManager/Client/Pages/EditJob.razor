@page "/EditJob/{ProjectId}"

@using SimpleProjectManager.Shared.Validators
@inherits ComputedStateComponent<JobEditorModel?>

@inject IEventAggregator _eventAggregator
@inject IJobDatabaseService _jobDatabase
@inject NavigationManager _navigationManager

<PageTitle>Job Beabeiten</PageTitle>

@if (string.IsNullOrWhiteSpace(ProjectId))
{
    <MudText Typo="Typo.h3">Kein Job Id Angegeben</MudText>
}
else
{
    <StateAwaiter State="State">
        <JobEditor Model="context" CanCancel="true" Configuration="@JobEditorConfiguration.EditJobConfig" Title="JobData Beabeiten" Cancel="Cancel" Commit="Commit"/>
    </StateAwaiter>
}

@code {
    [Parameter]
    public string ProjectId { get; set; } = string.Empty;

    protected override async Task<JobEditorModel?> ComputeState(CancellationToken cancellationToken) 
        => string.IsNullOrWhiteSpace(ProjectId) 
            ? null : new JobEditorModel(await _jobDatabase.GetJobData(new ProjectId(ProjectId), cancellationToken));

    private void Cancel()
        => _navigationManager.NavigateTo("/");

    private async Task Commit(JobEditorCommit newData)
    {
        if (newData.JobData.OldData == null)
        {
            _eventAggregator.PublishError("Keine Original Daten zur verfügung gestellt");
            return;
        }

        var command = UpdateProjectCommand.Create(newData.JobData.NewData, newData.JobData.OldData);
        var validator = new UpdateProjectCommandValidator();
        var validationResult = await validator.ValidateAsync(command);

        if (validationResult.IsValid)
        {
            if (await _eventAggregator.IsSuccess(() => TimeoutToken.WithDefault(t => _jobDatabase.UpdateJobData(command, t))))
                _navigationManager.NavigateTo("/");
        }
        else
        {
            var err = string.Join(", ", validationResult.Errors.Select(f => f.ErrorMessage));
            _eventAggregator.PublishWarnig(err);
        }
    }
}
