
@inherits ComputedStateComponent<ImmutableList<JobSortOrderPair>>

@using System.Numerics
@implements IDisposable

@inject IJobDatabaseService _jobDatabase;
@inject NavigationManager _navigation;

<MudGrid>
    <MudItem lg="12">
        <MudButton Class="ma-3" StartIcon="@Icons.Filled.NewLabel" OnClick="NewJob">Neuer Job</MudButton>
    </MudItem>
    <StateAwaiter State="State">

        @if (context == null || context.Count == 0 || Model == null)
        {
            <MudItem lg="12">
                <MudText>Kein Aktiven Aufträge</MudText>
            </MudItem>
        }
        else
        {
            <MudItem lg="12">
                <JobPriorityControl ActivePairs="context" Model="Model"/>
            </MudItem>
            <MudItem lg="12">
                <MudList Clickable="true" SelectedValue="_selectedValue" SelectedValueChanged="_newItemSelectedAction">
                    @foreach (var job in context)
                    {
                        <MudListItem @key="job.Info.Project" Value="job">
                            <MudPaper Class="pa-2">
                                <MudGrid>
                                    <MudItem lg="12" Class="mb-n2">
                                        <MudText Typo="Typo.h4">@job.Info.Name.Value</MudText>
                                    </MudItem>
                                    <MudItem lg="9" Class="my-n2">
                                        @if (job.Info.Deadline == null)
                                        {
                                            <MudText Typo="Typo.body1">Kein Termin angegeben</MudText>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.body1">Termin: @job.Info.Deadline.Value.LocalDateTime.ToString("d")</MudText>
                                        }
                                    </MudItem>
                                    <MudItem lg="3" Style="height: 48px" Class="my-n2">
                                        @if (job.Order.Value < 0)
                                        {
                                            <MudIcon Icon="@Icons.Rounded.Warning" Color="Color.Warning"/>
                                        }
                                    </MudItem>
                                    <MudItem lg="12" Class="mt-n2">
                                        <MudText Typo="Typo.body1">Status: @JobTranslator.GetString(job.Info.Status)</MudText>
                                    </MudItem>
                                </MudGrid>
                            </MudPaper>
                        </MudListItem>
                    }
                </MudList>
            </MudItem>
        }
    </StateAwaiter>
</MudGrid>

@code {
    
    [Parameter]
    public JobInfo[]? CurrentJobs { get; set; } = Array.Empty<JobInfo>();

    [Parameter]
    public JobsViewModel? Model { get; set; }
    
    private object? _selectedValue;
    private IDisposable _subscription = System.Reactive.Disposables.Disposable.Empty;

    private void NewJob()
        => _navigation.NavigateTo("/NewJob");

    protected override void OnInitialized()
    {
        _newItemSelectedAction = EventUtil.AsNonRenderingEventHandler<object?>(NewItemSelected);

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (Model != null)
        {
            _subscription.Dispose();
            _subscription = Model
                .CurrentInfo
                .Subscribe(i =>
                           {
                               if (_selectedValue is not JobSortOrderPair info || info != i) return;

                               _selectedValue = i;
                               StateHasChanged();

                           });
        }

        base.OnParametersSet();
    }

    private Action<object?> _newItemSelectedAction = _ => { };

    private void NewItemSelected(object? data)
    {
        _selectedValue = data;

        if(data is JobSortOrderPair info)
        Model?.Publish(info);
    }

    protected override async Task<ImmutableList<JobSortOrderPair>> ComputeState(CancellationToken cancellationToken)
    {
        try
        {
            var list = new List<JobSortOrderPair>();

    // ReSharper disable once InvertIf
            if (CurrentJobs != null)
            {
                foreach (var currentJob in CurrentJobs)
                {
                    if (cancellationToken.IsCancellationRequested) return ImmutableList<JobSortOrderPair>.Empty;

                    list.Add(new JobSortOrderPair(await _jobDatabase.GetSortOrders(currentJob.Project, cancellationToken), currentJob));
                }
            }

            return list
                .GroupBy(p => p.Info.Status)
                .OrderByDescending(g => g.Key)
                .SelectMany(g => g.OrderBy(p => p.Order.Value))
                .ToImmutableList();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    public void Dispose()
        => _subscription.Dispose();

}
