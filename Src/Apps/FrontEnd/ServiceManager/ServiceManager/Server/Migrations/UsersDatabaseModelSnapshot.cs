// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceManager.Server.AppCore.Identity;

namespace ServiceManager.Server.Migrations
{
    [DbContext(typeof(UsersDatabase))]
    partial class UsersDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("ServiceManager.Server.AppCore.Identity.SessionInfoEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthenticatedIdentity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSignOutForced")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastSeenAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt", "IsSignOutForced");

                    b.HasIndex("IPAddress", "IsSignOutForced");

                    b.HasIndex("LastSeenAt", "IsSignOutForced");

                    b.HasIndex("UserId", "IsSignOutForced");

                    b.ToTable("_Sessions");
                });

            modelBuilder.Entity("ServiceManager.Server.AppCore.Identity.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Stl.Fusion.EntityFramework.Authentication.DbUserIdentity<long>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long>("DbUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("UserEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("UserIdentities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DbUserIdentity<long>");
                });

            modelBuilder.Entity("Stl.Fusion.EntityFramework.Extensions.DbKeyValue", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.HasIndex("ExpiresAt");

                    b.ToTable("_KeyValues");
                });

            modelBuilder.Entity("Stl.Fusion.EntityFramework.Operations.DbOperation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CommandJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CommitTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CommitTime" }, "IX_CommitTime");

                    b.HasIndex(new[] { "StartTime" }, "IX_StartTime");

                    b.ToTable("_Operations");
                });

            modelBuilder.Entity("ServiceManager.Server.AppCore.Identity.UserIdentityEntity", b =>
                {
                    b.HasBaseType("Stl.Fusion.EntityFramework.Authentication.DbUserIdentity<long>");

                    b.ToTable("UserIdentities");

                    b.HasDiscriminator().HasValue("UserIdentityEntity");
                });

            modelBuilder.Entity("Stl.Fusion.EntityFramework.Authentication.DbUserIdentity<long>", b =>
                {
                    b.HasOne("ServiceManager.Server.AppCore.Identity.UserEntity", null)
                        .WithMany("Identities")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("ServiceManager.Server.AppCore.Identity.UserEntity", b =>
                {
                    b.Navigation("Identities");
                });
#pragma warning restore 612, 618
        }
    }
}
