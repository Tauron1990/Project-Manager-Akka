@using ServiceManager.Shared.Identity
@using Stl.Fusion.Authentication
@using Tauron.Application
@using Blazored.LocalStorage

@inject IEventAggregator _aggregator
@inject IUserManagement _management
@inject ISessionProvider _provider
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary">
        <MudTabPanel Text="Login">
            <SimpleUserForm @bind-Name="_name" @bind-Password="_password" ButtonLabel="Log in" Click="LogIn"/>
        </MudTabPanel>
        <MudTabPanel Text="Registrieren">
            <SimpleUserForm @bind-Name="_name" @bind-Password="_password" ButtonLabel="Registrieren" Click="Register"/>
        </MudTabPanel>
    </MudTabs>
</MudContainer>

@code {

    private string _name = string.Empty;

    private string _password = string.Empty;

    private async Task LogIn()
    {
        if (await _aggregator.IsSuccess(async () =>
                                              {
                                                  var result = await _management.LogIn(new TryLoginCommand(_name, _password, _provider.Session));
                                                  if (string.IsNullOrWhiteSpace(result))
                                                      await App.SaveItem(_localStorage, App.GlobalSessionId, true);
                                                  return result;
                                              }))
        {
            if (_navigationManager.TryGetQueryString("return", out string? url) && !string.IsNullOrWhiteSpace(url))
                _navigationManager.NavigateTo(url);
        }
    }

    private Task Register()
        => _aggregator.IsSuccess(() => _management.Register(new RegisterUserCommand(_name, _password)));

}
