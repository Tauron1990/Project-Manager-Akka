@inherits LayoutComponentBase

@inject IEventAggregator _aggregator
@inject ISnackbar _snackbar
@inject HubConnection _hubConnection
@using Microsoft.AspNetCore.SignalR.Client
@using System.Reactive.Disposables
@implements IDisposable

<MudLayout>
    <MudThemeProvider/>
    <MudDialogProvider DisableBackdropClick="true"/>
    <MudSnackbarProvider/>

    <IpOkComponent>
        <MudAppBar Elevation="4" Dense="true">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
            <MudSpacer/>
            <ClusterConnectionAlert/>
            <MudSpacer/>
            <MudButton Variant="Variant.Text" Link="/User" Color="Color.Tertiary">@_userName</MudButton>
            <LogoutButton/>
            <MudButton Variant="Variant.Text" Link="/About" Color="Color.Tertiary">About</MudButton>
        </MudAppBar>
        <MudDrawer Open="@_open" Elevation="4" Variant="DrawerVariant.Responsive" ClipMode="DrawerClipMode.Always">
            <MudDrawerHeader>Service Manager</MudDrawerHeader>
            <NavMenu Navigating="OnNavigating"/>
        </MudDrawer>
        <MudMainContent>
            <MudContainer Fixed="true" Class="mt-2">
                @Body
            </MudContainer>
        </MudMainContent>
    </IpOkComponent>
</MudLayout>


@code
{
    private readonly CompositeDisposable _disposer = new();

    [CascadingParameter]
    public Task<AuthState>? UserState { get; set; }

    private string _userName = "Gast";

    bool _open;

    void ToggleDrawer() => _open = !_open;

    private void OnNavigating() => _open = false;

    protected override async Task OnInitializedAsync()
    {
        if (_hubConnection.State == HubConnectionState.Disconnected)
            await _hubConnection.StartAsync();
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (UserState != null)
        {
            var result = await UserState;
            if (!string.IsNullOrWhiteSpace(result.User.Name) && result.User.Name.ToUpper() != "GUEST")
                _userName = result.User.Name;
        }

        await base.OnParametersSetAsync();
    }

    public void Dispose()
        => _disposer.Dispose();
}