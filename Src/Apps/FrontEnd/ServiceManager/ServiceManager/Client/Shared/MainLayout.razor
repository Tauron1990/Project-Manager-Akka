@using System.Reactive.Disposables
@using Tauron
@using Tauron.Application
@using System.Reactive
@using ServiceManager.Client.ViewModels.Events
@using ServiceManager.Client.Shared.BaseComponents

@inherits LayoutComponentBase

@inject IEventAggregator _aggregator
@inject ISnackbar _snackbar

@implements IDisposable

<MudLayout>
    <MudThemeProvider/>
    <MudDialogProvider DisableBackdropClick="true"/>
    <MudSnackbarProvider/>
    
    <IpOkComponent>
        <BasicAppInfoComponent>
            <MudAppBar Elevation="4" Dense="true">
                <MudSpacer/>
                <ClusterConnectionAlert/>
                <MudSpacer/>
                <MudButton Variant="Variant.Text" Link="/About" Color="Color.Secondary">About</MudButton>
            </MudAppBar>
            <MudDrawer Elevation="30" Open="true" ClipMode="DrawerClipMode.Docked">
                <NavMenu/>
            </MudDrawer>
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
                    @Body
                </MudContainer>
            </MudMainContent>
        </BasicAppInfoComponent>
    </IpOkComponent>
</MudLayout>

@code
{
    private readonly CompositeDisposable _disposer = new();

    protected override void OnInitialized()
    {
        try
        {
            _aggregator.GetEvent<ReloadAllEvent, Unit>().Get()
                       .Subscribe(_ => Task.Delay(5000).ContinueWith(_ => InvokeAsync(StateHasChanged)))
                       .DisposeWith(_disposer);

            _aggregator.ConsumeMessages()
                       .Subscribe(m => m.Apply(_snackbar))
                       .DisposeWith(_disposer);

            _aggregator.GetEvent<RestartClient, Unit>()
                       .Get().AutoSubscribe(e => _aggregator.PublishError(e));

            base.OnInitialized();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public void Dispose()
        => _disposer.Dispose();

}
