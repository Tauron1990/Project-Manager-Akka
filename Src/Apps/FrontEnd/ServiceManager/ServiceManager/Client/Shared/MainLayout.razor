@using System.Reactive.Disposables
@using Tauron
@using Tauron.Application
@using System.Reactive
@using ServiceManager.Client.ViewModels.Events

@inherits LayoutComponentBase

@inject IEventAggregator _aggregator
@inject ISnackbar _snackbar

@implements IDisposable

<MudLayout>
    <MudThemeProvider/>
    <MudDialogProvider DisableBackdropClick="true"/>
    <MudSnackbarProvider/>

    <IpOkComponent>
        <MudAppBar Elevation="4" Dense="true">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
            <MudSpacer/>
            <ClusterConnectionAlert/>
            <MudSpacer/>
            <MudButton Variant="Variant.Text" Link="/User" Color="Color.Tertiary">@UserName</MudButton>
            <MudButton Variant="Variant.Text" Link="/About" Color="Color.Tertiary">About</MudButton>
        </MudAppBar>
        <MudDrawer Open="@_open" Elevation="4" Variant="DrawerVariant.Responsive" ClipMode="DrawerClipMode.Always">
            <MudDrawerHeader>Service Manager</MudDrawerHeader>
            <NavMenu Navigating="OnNavigating"/>
        </MudDrawer>
        <MudMainContent>
            <MudContainer Fixed="true" Class="mt-2">
                @Body
            </MudContainer>
        </MudMainContent>
    </IpOkComponent>
</MudLayout>

    
@code
{
    private readonly CompositeDisposable _disposer = new();

    [CascadingParameter]
    public Task<AuthState>? UserState { get; set; }

    private string UserName = "Gast";
    
    bool _open = false;

    void ToggleDrawer() => _open = !_open;

    private void OnNavigating() => _open = false;

    protected override void OnInitialized()
    {
        try
        {
            _aggregator.GetEvent<ReloadAllEvent, Unit>().Get()
                       .Subscribe(_ => Task.Delay(5000).ContinueWith(_ => InvokeAsync(StateHasChanged)))
                       .DisposeWith(_disposer);

            _aggregator.ConsumeMessages()
                       .Subscribe(m => m.Apply(_snackbar))
                       .DisposeWith(_disposer);

            _aggregator.GetEvent<RestartClient, Unit>()
                       .Get().AutoSubscribe(e => _aggregator.PublishError(e));

            base.OnInitialized();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (UserState != null)
        {
            var result = await UserState;
            if (!string.IsNullOrWhiteSpace(result.User.Name) && result.User.Name.ToUpper() !=  "GUEST")
                UserName = result.User.Name;
        }
        
        await base.OnParametersSetAsync();
    }

    public void Dispose()
        => _disposer.Dispose();
}
