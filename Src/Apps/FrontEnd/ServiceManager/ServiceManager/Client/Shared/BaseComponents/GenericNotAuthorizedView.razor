@using ServiceManager.Client.ViewModels.Identity

@inject IErrorMessageProvider _errorMessage

<div class="d-flex flex-column justify-space-around">
    @if (_authenticationState == null || _userState == null)
    {
        <MudText Class="justify-center">Unbekannter Fehler</MudText>
    }
    else if(Claims.Length == 0 || _userState.IsAnonymos)
    {
        <MudText Class="justify-center">Bitte melde dich an um Zugriff zu erhalten!</MudText>
        <MudLink Class="justify-center" Href="/User">Anmelden</MudLink>
    }
    else
    {
        <p>
            @foreach (var msg in _errorMessage.GetMessage(_authenticationState, Claims))
            {
                <MudText Class="justify-center">@msg</MudText>
            }
        </p>
        <p>
            <MudText Class="justify-center">Wende die an einen Administrator um zufriff auf die Resource zu erhalten</MudText>
        </p>
    }
</div>

@code {

    [Parameter]
    public string[] Claims { get; set; } = Array.Empty<string>();

    [CascadingParameter]
    public Task<AuthenticationState>? State { get; set; }

    private UserState? _userState;
    private AuthenticationState? _authenticationState;

    protected override async Task OnParametersSetAsync()
    {
        if(State == null) return;

        _authenticationState = await State;
        _userState = _authenticationState as UserState;
        await base.OnParametersSetAsync();
    }

}
