@using ServiceManager.Shared.ServiceDeamon
@using ServiceManager.Shared.ClusterTracking

@inject IDatabaseConfig _databaseConfig;
@inject IClusterConnectionTracker _tracker;

@inherits ComputedStateComponent<AppData>;

@{
    var data = State.ValueOrDefault ?? new AppData(false, false, false);
}

<CascadingValue Value="data.IsConnected" Name="@IsConnected">
    <CascadingValue Value="data.IsSelf" Name="@IsSelf">
        <CascadingValue Value="data.IsDatabaseReady" Name="@IsDatabaseReady">
            @ChildContent
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code {

        public const string IsConnected = nameof(IsConnected);
        public const string IsSelf = nameof(IsSelf);
        public const string IsDatabaseReady = nameof(IsDatabaseReady);

    [Parameter]
    public RenderFragment ChildContent { get; set; } = _ => { };

    protected override async Task<AppData> ComputeState(CancellationToken cancellationToken)
        => new(await _tracker.GetIsConnected(), await _tracker.GetIsSelf(), await _databaseConfig.GetIsReady());

}