@inject BasicAppInfoHelper _helper;

@using System.Reactive.Disposables
@using ServiceManager.Shared.ClusterTracking
@implements IDisposable

@{
    var state = _helper.Ip;
    var error = state.Error;
    var ip = state.ValueOrDefault ?? AppIp.Invalid;
}

<MudMainContent>
    @if (state.IsLoading())
    {
        <div class="d-flex flex-row justify-center">
            <MudProgressCircular Class="justify-center" Indeterminate="true"/>
        </div>
    }
    else if (error != null)
    {
        <div class="d-flex flex-row justify-center">
            <MudAlert Class="justify-space-around" Severity="Severity.Error" Variant="Variant.Filled">Fehler bem abrufen der Ip: @error.Message</MudAlert>
        </div>
    }
    else if (!ip.IsValid)
    {
        <NoIpFoundEditor/>
    }
    else
    {
        @ChildContent
    }
</MudMainContent>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; } = _ => { };

    protected override void OnInitialized()
    {
        _subscription = _helper.IpChanged.Subscribe(_ => InvokeAsync(StateHasChanged));
        base.OnInitialized();
    }

    protected override Task OnInitializedAsync() => Task.Delay(1000);

    private IDisposable _subscription = Disposable.Empty;

    public void Dispose() => _subscription.Dispose();
}