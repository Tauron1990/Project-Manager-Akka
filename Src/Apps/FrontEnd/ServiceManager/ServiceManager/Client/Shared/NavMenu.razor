@using ServiceManager.Shared.ServiceDeamon
@using ServiceManager.Client.ViewModels.Apps
@using ServiceManager.Shared.Apps
@inherits ComputedStateComponent<NavMenuData>

@inject IDatabaseConfig _database;
@inject NavigationManager _navigationManager;
@inject BasicAppsAlertModel _appAlertModel

@{
    var menuData = State.ValueOrDefault ?? new NavMenuData(true, new NeedSetupData(null, false));
}

<MudDivider Class="mb-4"/>
<MudNavMenu>
    <MudNavLink Class="ma-1" OnClick="@(() => Navigate(""))">Übersicht</MudNavLink>
    <MudBadge Icon="@(menuData.Database ? null : Icons.Material.Outlined.Warning)" Color="@(menuData.Database ? Color.Transparent : Color.Warning)" Overlap="true">
        <MudNavLink OnClick="@(() => Navigate("/AppConfiguration"))">Konfiguration</MudNavLink>
    </MudBadge>
    <MudBadge Color="@(menuData.Apps.Need ? Color.Warning : Color.Transparent)" Overlap="true" Icon="@(menuData.Apps.Need ? Icons.Material.Outlined.Warning : null)">
        <MudNavLink Class="ma-1" OnClick="@(() => Navigate("/Apps"))">Anwendungen</MudNavLink>
    </MudBadge>
</MudNavMenu>

@code {

    [Parameter]
    public EventCallback Navigating { get; set; }

    protected override async Task<NavMenuData> ComputeState(CancellationToken cancellationToken)
        => new(await _database.GetIsReady(), await _appAlertModel.SetupState.Use(cancellationToken));

    private async Task Navigate(string target)
    {
        await Navigating.InvokeAsync();
        _navigationManager.NavigateTo(target);
    }

}