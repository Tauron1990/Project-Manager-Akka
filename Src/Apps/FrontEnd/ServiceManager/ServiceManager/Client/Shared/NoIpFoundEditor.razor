@using ServiceManager.Shared
@using ServiceManager.Shared.ClusterTracking
@using Tauron.Application
@using ServiceManager.Client.ViewModels.Models

@inherits PropertyChangedComponent

@inject IAppIpManager _appIpManager
@inject IServerInfo _applicationLifetime
@inject IEventAggregator _eventAggregator;

<MudContainer MaxWidth="MaxWidth.Small">
    <MudText Typo="Typo.h4" Class="ma-4"> Ip Adresse Bebaeiten </MudText>
    <MudTextFieldString @bind-Value="_ipContent" Label="Ip" Class="ma-4"/>
    <MudButton OnClick="Restart" Class="ma-4">Anwenden und Neustarten</MudButton>
</MudContainer>

@code {

    [Parameter]
    public AppIp Ip { get; set; } = AppIp.Invalid;

    private string _ipContent = string.Empty;

    protected override void OnInitialized()
    {
        _ipContent = string.Empty;
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await Track(_appIpManager);
        await Init(_applicationLifetime);
    }

    private async Task Restart()
    {
        var result = await _appIpManager.WriteIp(_ipContent);
        if(string.IsNullOrWhiteSpace(result))
            await _applicationLifetime.Restart();
        else
            _eventAggregator.PublishMessage(new SnackbarErrorMessage(result));
    }
}
