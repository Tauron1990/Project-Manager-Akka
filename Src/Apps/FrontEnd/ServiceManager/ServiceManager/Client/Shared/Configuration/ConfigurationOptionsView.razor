@using ServiceManager.Shared.Api
@inherits PropertyChangedComponent

@inject ConfigurationOptionsViewModel _model

<MudExpansionPanels Class="flex-grow-1 flex-shrink-0">
    <MudExpansionPanel Text="Akka" IsExpandedChanged="AkkaOpen">
        <MudButton OnClick="@(async () => await _model.ShowConfigFile(ConfigurationRestApi.ModuleName.Akka))">Standart Datei Anzeigen</MudButton>
        <OptionElementRenderer OptionSelected="OptionSelectCallback" Element="_model.Akka"/>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Akka Remote" IsExpandedChanged="RemoteOpen">
        <MudButton OnClick="@(async () => await _model.ShowConfigFile(ConfigurationRestApi.ModuleName.AkkaRemote))">Standart Datei Anzeigen</MudButton>
        <OptionElementRenderer OptionSelected="OptionSelectCallback" Element="_model.AkkaRemote"/>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Akka Cluster" IsExpandedChanged="ClusterOpen">
        <MudButton OnClick="@(async () => await _model.ShowConfigFile(ConfigurationRestApi.ModuleName.AkkaCluster))">Standart Datei Anzeigen</MudButton>
        <OptionElementRenderer OptionSelected="OptionSelectCallback" Element="_model.AkkaCluster"/>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Akka Persistence" IsExpandedChanged="PersistenceOpen">
        <MudButton OnClick="@(async () => await _model.ShowConfigFile(ConfigurationRestApi.ModuleName.AkkaPersistence))">Standart Datei Anzeigen</MudButton>
        <OptionElementRenderer OptionSelected="OptionSelectCallback" Element="_model.AkkaPersistence"/>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Akka Streams" IsExpandedChanged="StreamsOpen">
        <MudButton OnClick="@(async () => await _model.ShowConfigFile(ConfigurationRestApi.ModuleName.AkkaStreams))">Standart Datei Anzeigen</MudButton>
        <OptionElementRenderer OptionSelected="OptionSelectCallback" Element="_model.AkkaStreams"/>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    [Parameter] 
    public EventCallback<OptionSelected> OptionSelectedEvent { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await Track(_model);
        await base.OnInitializedAsync();
    }

    private async Task OptionSelectCallback(OptionSelected data)
        => await OptionSelectedEvent.InvokeAsync(data);

    private async void AkkaOpen(bool open)
    {
        if (open)
        {
            await _model.LoadAsyncFor(ConfigurationRestApi.ModuleName.Akka);
        }
    }

    private async void RemoteOpen(bool open)
    {
        if (open)
            await _model.LoadAsyncFor(ConfigurationRestApi.ModuleName.AkkaRemote);
    }

    private async void ClusterOpen(bool open)
    {
        if (open)
            await _model.LoadAsyncFor(ConfigurationRestApi.ModuleName.AkkaCluster);
    }

    private async void PersistenceOpen(bool open)
    {
        if (open)
            await _model.LoadAsyncFor(ConfigurationRestApi.ModuleName.AkkaPersistence);
    }

    private async void StreamsOpen(bool open)
    {
        if (open)
            await _model.LoadAsyncFor(ConfigurationRestApi.ModuleName.AkkaStreams);
    }
}
