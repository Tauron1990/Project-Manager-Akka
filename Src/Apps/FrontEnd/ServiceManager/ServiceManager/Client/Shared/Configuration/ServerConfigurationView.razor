@using ServiceManager.Shared.ServiceDeamon
@using ServiceManager.Client.ViewModels.Configuration
@using ServiceHost.ClientApp.Shared.ConfigurationServer.Data
@inherits ComputedStateComponent<ServiceHost.ClientApp.Shared.ConfigurationServer.Data.ServerConfigugration>

@inject IServerConfigurationApi _api
@inject AppConfigurationViewModel _viewModel

@{
    var loading = State.Computed.ConsistencyState != ConsistencyState.Consistent;
    var config = State.Value;
}

<div class="d-flex justify-center">
    <MudPaper Class="d-flex ma-3 pa-3">
        @if (!loading)
        {
            <MudCheckBox Class="d-flex d-inline-flex ma-1" T="Boolean"
                         Checked="config.MonitorChanges"
                         CheckedChanged="b => _viewModel.SetMonitorChanges(config, b)">
                Änderungen Übserwachen
            </MudCheckBox>
            <MudCheckBox Class="d-flex d-inline-flex ma-1" T="Boolean"
                         Checked="config.RestartServices"
                         CheckedChanged="b => _viewModel.SetRestartServices(config, b)">
                Services Neustarten
            </MudCheckBox>
        }
        else
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        }
    </MudPaper>
</div>

@code {

    protected override Task<ServerConfigugration> ComputeState(CancellationToken cancellationToken)
        => _api.ServerConfigugration();

}