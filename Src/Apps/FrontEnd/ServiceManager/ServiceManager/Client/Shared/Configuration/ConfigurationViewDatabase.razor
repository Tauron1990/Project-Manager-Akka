@using ServiceManager.Shared.ServiceDeamon
@using Stl.Fusion
@using Microsoft.Extensions.DependencyInjection

@inherits ComputedStateComponent<string>

@inject IDatabaseConfig _databaseConfig

<div style="max-width: 1000px">
    <MudCard >
        <MudCardContent>
            <MudForm IsValidChanged="IsValidChaned">
                <MudTextFieldString DebounceInterval="500" Value="@_model.DatabaseUrl" ValueChanged="EnterUrl"
                                    Validation="_model.ValidateUrl" @ref="_databseFieldString"/>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Disabled="@_model.CanFetch" OnClick="TryFetchDatabseUrl">Url Abrufen</MudButton>
            <MudButton ButtonType="ButtonType.Reset" OnClick="Reset">Zurücksetzen</MudButton>
            <MudButton ButtonType="ButtonType.Submit" OnClick="_model.Submit" Disabled="@(!_model.IsValid)">Speichern</MudButton>
        </MudCardActions>
    </MudCard>
    <MudPaper Class="d-flex justify-center my-2">
        <MudText Class="ma-2" Style="max-width: 50%">
            Warnung: Änderungen an der Konfiguration führt zu partiellem oder komplettem neustart des Clusters.
            Fehler in der Konfiguration können zum ausfall des Clusters Führen.
        </MudText>
    </MudPaper>
</div>

@code {

    [CascadingParameter(Name = BasicAppInfoComponent.IsSelf)]
    public bool IsSelf { get; set; }
    
    protected override async Task<string> ComputeState(CancellationToken cancellationToken)
    {
        var result = await _databaseConfig.GetUrl();

        _model = _model with{ DatabaseUrl = result, OriginalUrl = result};

        return result;
    }

    private ConfigurationViewDatabseModel _model = null!;

    protected override void OnInitialized()
    {
        _model = ActivatorUtilities.CreateInstance<ConfigurationViewDatabseModel>(Services);
        base.OnInitialized();
    }

    private void EnterUrl(string url) 
        => _model = _model with{ DatabaseUrl = url};

    private async Task TryFetchDatabseUrl()
    {
        var (model, success) = await _model.TryFetchDatabseUrl();
        if(!success) return;

        _model = model;
        await InvokeAsync(StateHasChanged);
    }

    private void Reset()
    {
        _model = _model.Reset();
        InvokeAsync(StateHasChanged);
    }

    private void IsValidChaned(bool valid)
    {
        _model = _model with{ IsValid = valid};
        InvokeAsync(StateHasChanged);
    }

    private MudTextFieldString? _databseFieldString;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(_databseFieldString != null)
            await _databseFieldString.Validate();
        await base.OnAfterRenderAsync(firstRender);
    }
}