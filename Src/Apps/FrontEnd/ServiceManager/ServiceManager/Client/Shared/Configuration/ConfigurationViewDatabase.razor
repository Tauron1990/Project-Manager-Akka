@inherits ConnectionAwareComponent
@inject ConfigurationViewDatabseModel _model

<div style="max-width: 1000px">
    <MudCard >
        <MudCardContent>
            <MudForm @bind-IsValid="_isValid">
                <MudTextFieldString DebounceInterval="200" @bind-Value="@_model.DatabaseUrl" 
                                    Validation="_model.ValidateUrl" @ref="_databseFieldString"/>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Disabled="@CanFecth" OnClick="_model.TryFetchDatabseUrl">Url Abrufen</MudButton>
            <MudButton ButtonType="ButtonType.Reset" OnClick="_model.Reset">Zurücksetzen</MudButton>
            <MudButton ButtonType="ButtonType.Submit" OnClick="_model.Submit" Disabled="@(!_isValid)">Speichern</MudButton>
        </MudCardActions>
    </MudCard>
    <div class="d-flex">
        <MudText Class="d-flex justify-center" Style="max-width: 25%">
            Warnung: Änderungen an der Konfiguration führt zu partiellem oder oder Komplettem neustart des Clusters.
            Fehler in der Konfiguration können zum ausfall des Clusters Führen.
        </MudText>
    </div>
</div>

@code {

    private bool _isValid;

    private bool CanFecth => !IsSelf;

    private MudTextFieldString? _databseFieldString;

    [CascadingParameter]
    public IOperationManager Manager { get; set; } = OperationManager.Empty;

    protected override async Task OnInitializedAsync() => await Track(_model);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(_databseFieldString != null)
            await _databseFieldString.Validate();
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"Cluster IsSelf:{IsSelf}");
        _model.Operation = Manager;
        base.OnParametersSet();
    }

}