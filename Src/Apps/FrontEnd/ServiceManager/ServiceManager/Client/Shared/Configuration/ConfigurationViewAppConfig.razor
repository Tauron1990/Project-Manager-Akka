@using ServiceHost.Client.Shared.ConfigurationServer.Data
@using System.Reflection
@using Akka.Util.Internal
@using Autofac.Features.OwnedInstances
@using Tauron
@inherits PropertyChangedComponent

@inject ConfigurationViewAppConfigModel _model

@if (_model.ToEdit != null)
{
    <MudToolBar>
        <MudIconButton Icon="@Icons.Material.Outlined.Save" OnClick="async () => await _model.CommitConfig(_model.ToEdit)"/>
        <MudIconButton Icon="@Icons.Material.Outlined.Cancel" OnClick="() => _model.EditConfig(null)"/>
        <MudToolBarSpacer/>
        <MudText>@_model.ToEdit.Config.Id</MudText>
    </MudToolBar>
    <MudTabs>
        <MudTabPanel Text="Konfiguration">
            <div class="d-flex" style="flex-direction: row">
                <MudTextFieldString Class="flex-grow-0" @bind-Value="_model.ToEdit.InfoString" Label="Konfiguration Info"/>
                <div class="flex-grow-1">
                    <EditForm Model="_model">
                        <InputTextArea @bind-Value="@_model.ToEdit.ConfigString" DisplayName="Konfigurations Text"/>
                    </EditForm>
                </div>
                <ConfigurationOptionsView OptionSelectedEvent="_model.ToEdit.OptionSelected"/>
            </div>
        </MudTabPanel>
        <MudTabPanel Text="Bedingungen">
            
        </MudTabPanel>
    </MudTabs>
}
else
{
    <MudTable Items="@_model.AppConfigs" Hover="true" Loading="_model.IsLoading" @bind-SelectedItem="Selected">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Anwendungen Konfiguration</MudText>
            <MudSpacer/>
            <MudButton Class="ma-2" OnClick="_model.NewConfig">Neu</MudButton>
            <MudButton Class="ma-2" @ref="_delete" OnClick="async () => await _model.DeleteConfig(Selected)">Löschen</MudButton>
            <MudButton Class="ma-2" @ref="_edit" OnClick="() => _model.EditConfig(Selected)">Beabeiten</MudButton>
            <MudSpacer/>
        </ToolBarContent>
        <ColGroup>
            <col style="width: 100px"/>
            <col style="width: 100px"/>
            <col/>
            <col style="width: 50px"/>
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel Enabled="true" SortBy="new Func<AppConfigModel, object>(SelectIdKey)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<AppConfigModel, object>(SelectInfoKey)">Info</MudTableSortLabel></MudTh>
            <MudTh>Konfiguration</MudTh>
            <MudTh>Bedingungen</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Config.Id</MudTd>
            <MudTd DataLabel="Info">@context.Config.Info</MudTd>
            <MudTd DataLabel="Konfiguration">@context.Config.ConfigContent</MudTd>
            <MudTd DataLabel="Bedingungen">@context.Config.Conditions.Count</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private AppConfigModel? Selected { get; set; }

    private string Selection => Selected?.Config.Id ?? "Nichts Gewählt";

    private MudButton? _delete;

    private MudButton? _edit;

    private object SelectIdKey(AppConfigModel model)
        => model.Config.Id;

    private object SelectInfoKey(AppConfigModel model)
        => model.Config.Info ?? string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _model.DisposeWith(this);
        await Track(_model);
        await base.OnInitializedAsync();
    }
}
