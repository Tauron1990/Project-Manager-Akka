@using ServiceHost.Client.Shared.ConfigurationServer.Data
@using System.Reflection
@using Akka.Util.Internal
@using Autofac.Features.OwnedInstances
@using Tauron
@inherits PropertyChangedComponent

@inject Owned<ConfigurationViewAppConfigModel> _model

@if (_model.Value.ToEdit != null)
{

}
else
{
    <MudTable Items="@_model.Value.AppConfigs" Hover="true" Loading="_model.Value.IsLoading" @bind-SelectedItem="Selected">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Anwendungen Konfiguration</MudText>
            <MudSpacer/>
            <MudButton Class="ma-2" OnClick="_model.Value.NewConfig">Neu</MudButton>
            <MudButton Class="ma-2" @ref="_delete" OnClick="async () => await _model.Value.DeleteConfig(_selected)">Löschen</MudButton>
            <MudButton Class="ma-2" @ref="_edit" OnClick="async () => await _model.Value.EditConfig(_selected)">Beabeiten</MudButton>
            <MudSpacer/>
        </ToolBarContent>
        <ColGroup>
            <col style="width: 100px"/>
            <col style="width: 100px"/>
            <col/>
            <col style="width: 50px"/>
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel Enabled="true" SortBy="new Func<AppConfigModel, object>(SelectIdKey)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<AppConfigModel, object>(SelectInfoKey)">Info</MudTableSortLabel></MudTh>
            <MudTh>Konfiguration</MudTh>
            <MudTh>Bedingungen</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Config.Id</MudTd>
            <MudTd DataLabel="Info">@context.Config.Info</MudTd>
            <MudTd DataLabel="Konfiguration">@context.Config.ConfigContent</MudTd>
            <MudTd DataLabel="Bedingungen">@context.Config.Conditions.Count</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {

    private static MethodInfo _updater = typeof(MudButton).GetMethod(nameof(StateHasChanged)) ?? throw new InvalidOperationException("State Changed Method not Found");

    private AppConfigModel? _selected;

    private AppConfigModel? Selected
    {
        get => _selected;
        set
        {
            _selected = value;
            UpdateButtons();
        }
    }

    private string Selection => Selected?.Config.Id ?? "Nichts Gewählt";

    private MudButton? _delete;

    private MudButton? _edit;

    private object SelectIdKey(AppConfigModel model)
        => model.Config.Id;

    private object SelectInfoKey(AppConfigModel model)
        => model.Config.Info ?? string.Empty;

    private void UpdateButtons()
    {
        if(_delete != null)
            _updater.Invoke(_delete, null);
        if (_edit != null)
            _updater.Invoke(_edit, null);
    }

    protected override async Task OnInitializedAsync()
    {
        _model.DisposeWith(this);
        await Track(_model.Value);
        await base.OnInitializedAsync();
    }
}
