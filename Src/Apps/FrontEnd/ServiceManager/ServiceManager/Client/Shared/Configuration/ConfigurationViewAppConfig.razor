@using ServiceHost.Client.Shared.ConfigurationServer.Data
@using System.Reflection
@using Akka.Util.Internal
@using Autofac.Features.OwnedInstances
@using Tauron
@using System.Collections.Immutable
@using Microsoft.Extensions.DependencyInjection
@using ServiceManager.Client.Shared.Configuration.ConditionEditor
@using ServiceManager.Shared.ServiceDeamon
@using Stl.Fusion
@using Tauron.Application

@inherits MixedStateComponent<AppConfigViewData, AppConfigData>

@inject IDialogService _service;
@inject IEventAggregator _aggregator;
@inject IServerConfigurationApi _api;

@{
    var (configs, (newModel, toEdit)) = State.LatestNonErrorValue ?? new AppConfigViewData(ImmutableList<AppConfigModel>.Empty, new AppConfigData());
    if (newModel != null)
        configs = configs.Add(newModel);
}

@if (toEdit != null)
{
    <MudToolBar>
        <MudSpacer/>
        <MudSpacer/>
        <MudIconButton Icon="@Icons.Material.Outlined.Save" OnClick="async () => await _model.CommitConfig(toEdit)"/>
        <MudIconButton Icon="@Icons.Material.Outlined.Cancel" OnClick="() => _model.EditConfig(null)"/>
        <MudSpacer/>
        <MudText>@toEdit.Config.Id</MudText>
        <MudSpacer/>
                <MudSpacer/>
    </MudToolBar>
    <MudTabs Centered="true">
        <MudTabPanel Text="Konfiguration" Class="d-flex" Style="flex-direction: row">
            <MudContainer MaxWidth="MaxWidth.Medium">
                <MudTextFieldString Class="flex-row flex-grow-0 order-0 ma-3" @bind-Value="toEdit.InfoString" Label="Konfiguration Info"/>
                <div class="flex-row flex-grow-1 align-content-stretch order-1 ma-3" style="height: 400px; width: 1000px">
                    <EditForm Model="_model">
                        <InputTextArea style="height: 400px; width: 1000px" @bind-Value="@toEdit.ConfigString" DisplayName="Konfigurations Text"/>
                    </EditForm>
                </div>
                <div class="flex-row flex-grow-0 order-2 ma-3">
                    <ConfigurationOptionsView OptionSelectedEvent="toEdit.OptionSelected"/>
                </div>
            </MudContainer>            
        </MudTabPanel>
        <MudTabPanel Text="Bedingungen">
            <ConfigurationViewAppConfigConditionEdit Model="_model" ToEdit="toEdit" State="_editorState"/>
        </MudTabPanel>
    </MudTabs>
}
else
{
    <MudTable Items="@configs" Hover="true" Loading="State.IsLoading()" @bind-SelectedItem="Selected">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Anwendungen Konfiguration</MudText>
            <MudSpacer/>
            <MudButton Class="ma-2" OnClick="async () => await _model.NewConfig(configs)">Neu</MudButton>
            <MudButton Class="ma-2" @ref="_delete" OnClick="async () => await _model.DeleteConfig(Selected)">Löschen</MudButton>
            <MudButton Class="ma-2" @ref="_edit" OnClick="() => _model.EditConfig(Selected)">Beabeiten</MudButton>
            <MudSpacer/>
        </ToolBarContent>
        <ColGroup>
            <col style="width: 100px"/>
            <col style="width: 100px"/>
            <col/>
            <col style="width: 50px"/>
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel Enabled="true" SortBy="new Func<AppConfigModel, object>(SelectIdKey)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<AppConfigModel, object>(SelectInfoKey)">Info</MudTableSortLabel></MudTh>
            <MudTh>Konfiguration</MudTh>
            <MudTh>Bedingungen</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Config.Id</MudTd>
            <MudTd DataLabel="Info">@context.Config.Info</MudTd>
            <MudTd DataLabel="Konfiguration">@context.Config.ConfigContent</MudTd>
            <MudTd DataLabel="Bedingungen">@context.Config.Conditions.Count</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {

    protected override async Task<AppConfigViewData> ComputeState(CancellationToken cancellationToken) 
        => new((await _api.QueryAppConfig()).Select(d => new AppConfigModel(d, _aggregator)).ToImmutableList(), MutableState.Value);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _model = new ConfigurationViewAppConfigModel(MutableState, _api, _service, _aggregator);
    }

    private ConfigurationViewAppConfigModel _model = null!;

    private EditorState _editorState = new();
    
    private AppConfigModel? Selected { get; set; }

    private string Selection => Selected?.Config.Id ?? "Nichts Gewählt";

    private MudButton? _delete;

    private MudButton? _edit;

    private object SelectIdKey(AppConfigModel model)
        => model.Config.Id;

    private object SelectInfoKey(AppConfigModel model)
        => model.Config.Info ?? string.Empty;
}
