@inject ISnackbar _snackbar

@using System.Collections.Immutable
@inherits DialogBaseComponent

<MudDialog Class="align-stretch">
    <TitleContent>
        <MudText Typo="Typo.h5">Neue App Konfiguration</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@_name" DebounceInterval="200" Validation="@_validateNameFunc" Label="Name der App Konfiguration"/>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CancelCallback">Abbrechen</MudButton>
        <MudButton OnClick="CreateCallback">Erstellen</MudButton>
    </DialogActions>
</MudDialog>

@code {

    public NewAppConfigDialog()
        => _validateNameFunc = ValidateName;

    [Parameter]
    public ImmutableHashSet<string> Blocked { get; set; } = ImmutableHashSet<string>.Empty;

    private string? _name;

    private readonly Func<string?, string?> _validateNameFunc;

    private string? ValidateName(string? s)
        => string.IsNullOrWhiteSpace(s)
            ? "Kein Name angegeben"
            : Blocked.Contains(s)
                ? "Der Name wird schon Benutzt"
                : null;

    private void CancelCallback()
        => DialogInstance.Close(DialogResult.Cancel());

    private void CreateCallback()
    {
        if (string.IsNullOrWhiteSpace(_name))
        {
            _snackbar.Add("Kein Name angegeben", Severity.Warning);
            return;
        }

        if (Blocked.Contains(_name))
        {
            _snackbar.Add("Der Name wird schon benutzt", Severity.Warning);
            return;
        }

        DialogInstance.Close(DialogResult.Ok(_name));
    }

}