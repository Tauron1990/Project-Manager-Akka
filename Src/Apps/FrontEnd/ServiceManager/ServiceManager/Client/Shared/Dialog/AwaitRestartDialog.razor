@using ServiceManager.Client.ViewModels.Events
@using ServiceManager.Shared
@using Tauron
@using Tauron.Application
@using System.Reactive
@using Microsoft.AspNetCore.SignalR.Client

@inherits DialogBaseComponent<string>

@inject ILogger<AwaitRestartDialog> _log
@inject NavigationManager _manager
@inject IEventAggregator _aggregator
@inject IServerInfo _serverInfo
@inject HubConnection _connection;

<div class="mx-auto" style="width: 25%">
    <div class="loader">Neustarten...</div>

    @if (_trying)
    {
        <MudText Class="mt-10">Versuche Verbindung aufzubauen</MudText>
    }
    
    @if (_atempts > 5)
    {
        <MudButton Class="mt-5" OnClick="Reload">Neuladen</MudButton>
    }

    @if (_atempts > 0)
    {
        <MudText>Versuch Nummer: @_atempts</MudText>
    }

    @if (_errors.Count > 0)
    {
        @foreach (var err in _errors.AsEnumerable().Reverse())
        {
            <MudText>@err</MudText>
        }
    }
</div>

@code {
    private int _atempts;

    private bool _trying = true;

    private Timer? _timer;

    private readonly List<string> _errors = new();

    private void Reload()
    {
        _trying = false;
        _timer?.Change(Timeout.InfiniteTimeSpan, Timeout.InfiniteTimeSpan);
        _manager.NavigateTo("", true);
        _aggregator.GetEvent<ReloadAllEvent, Unit>().Publish(Unit.Default);
    }

    protected override void OnInitialized()
    {
        _timer = new Timer(TryRestart, null, TimeSpan.FromSeconds(20), Timeout.InfiniteTimeSpan)
            .DisposeWith(this);
        base.OnInitialized();
    }

    private async void TryRestart(object? state)
    {
        try
        {
            _trying = true;
            await InvokeAsync(StateHasChanged);
            var result = await TryReconnect();
            if (string.IsNullOrWhiteSpace(result))
            {
                Reload();
                return;
            }

            _atempts += 1;
            _errors.Add(result);
            await InvokeAsync(StateHasChanged);
            if (_timer?.Change(TimeSpan.FromSeconds(20), Timeout.InfiniteTimeSpan) != true)
                Reload();

        }
        catch (Exception exception)
        {
            _errors.Add(exception.Message);
            await InvokeAsync(StateHasChanged);
            _aggregator.PublishError(exception);
        }
    }

    private async Task<string?> TryReconnect()
    {
        try
        {
            using var cancel = new CancellationTokenSource(TimeSpan.FromSeconds(60));

            var newId = await _serverInfo.GetCurrentId(cancel.Token);
            if (newId == State.LatestNonErrorValue)
                return "Server nicht neu Gestartet";

            if (_connection.State == HubConnectionState.Disconnected)
    // ReSharper disable once MethodSupportsCancellation
                await _connection.StartAsync();

            return null;
        }
        catch (Exception e)
        {
            _log.LogError(e, "Error on Reconnect Server");
            return e.Message;
        }
    }

    protected override Task<string> ComputeState(CancellationToken cancellationToken) => _serverInfo.GetCurrentId(cancellationToken);

}
