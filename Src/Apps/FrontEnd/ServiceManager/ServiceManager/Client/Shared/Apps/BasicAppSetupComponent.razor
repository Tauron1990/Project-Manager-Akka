@using ServiceManager.Client.ViewModels.Apps
@using ServiceManager.Shared.Apps
@using Microsoft.AspNetCore.SignalR.Client
@using System.Reactive.Disposables
@using ServiceManager.Shared.Api
@using Tauron

@implements IDisposable

@inject ILogger<BasicAppSetupComponent> _log
@inject BasicAppsAlertModel _model
@inject IAppManagment _managment
@inject HubConnection _hubConnection
@inject IApiMessageTranslator _messageTranslator

@if (_isRunning)
{
    <CenterElement>
        <MudProgressCircular Indeterminate="true"/>
        <MudText>Setup Läuft</MudText>
        @foreach (var msg in _messages.Select(_messageTranslator.Translate))
        {
            <MudText>@msg</MudText>
        }
    </CenterElement>
}
else if(string.IsNullOrWhiteSpace(_error))
{
    @foreach (var msg in _messages.Select(_messageTranslator.Translate))
    {
        <MudText>@msg</MudText>
    }
    <MudAlert Severity="Severity.Success">Setup Abgeschlossen</MudAlert>
}
else
{
    @foreach (var msg in _messages.Select(_messageTranslator.Translate))
    {
        <MudText>@msg</MudText>
    }
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">Fehler: @_messageTranslator.Translate(_error)</MudAlert>
}

@code
{
    private readonly string _operationId = Guid.NewGuid().ToString("N");
    
    private bool _isRunning = true;
    private string? _error;
    private readonly List<string> _messages = new();
    private IDisposable _subscription = Disposable.Empty;

    protected override void OnInitialized()
    {
        _subscription = _hubConnection.On<string>(_operationId, MessageIncomming);
        base.OnInitialized();
    }

    private void MessageIncomming(string msg)
    {
        if(!_isRunning) return; 
        _messages.Add(msg);
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) Task.Run(SetupRunner).Ignore();
        base.OnAfterRender(firstRender);
    }

    private async Task SetupRunner()
    {
        try
        {
            var need = _model.SetupState.ValueOrDefault;
            if (need == null)
            {
                _error = _model.SetupState.Error?.Message ?? "Daten konnten nicht abgrufen werden";
                return;
            }

            if (!need.Need)
            {
                _error = string.IsNullOrWhiteSpace(need.Error) ? "Setup wird nicht benötigt" : need.Error;
                return;
            }

            RunAppSetupResponse response;
            RunAppSetupCommand command = RunAppSetupCommand.Initial(_operationId);
            do
            {
                response = await _managment.RunAppSetup(command);
                if (!string.IsNullOrWhiteSpace(response.Error))
                {
                    _error = response.Error;
                    break;
                }

                if (!response.IsCompled)
                    command = response.CreateNextStep(_operationId);
                
                _messages.Add(response.Message);
                StateHasChanged();
            } while (!response.IsCompled);
        }
        catch (Exception e)
        {
            _log.LogError(e, "Error on run Setup");
            _error = e.Message;
        }
        finally
        {
            _isRunning = false;
            StateHasChanged();
        }
    }

    public void Dispose() => _subscription.Dispose();
}
