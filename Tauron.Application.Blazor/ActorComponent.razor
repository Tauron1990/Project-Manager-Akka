@using Tauron.Application.CommonUI.Helper
@using Tauron.Application.CommonUI
@using Tauron.Akka
@using System.Reactive.Disposables
@using Autofac
@using Tauron.Application.Blazor.UI

@typeparam TModel

@implements IBinderControllable
@implements Tauron.Akka.IResourceHolder

@inject ILifetimeScope _lifetimeScope;

@code {

    private readonly CompositeDisposable _disposable = new();
    private readonly Dictionary<string, Registration> _registrations = new();
    private IViewModel<TModel>? _model;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public EventCallback<IViewModel<TModel>> ModelLoaded { get; set; }

    void IResourceHolder.AddResource(IDisposable res) => _disposable.Add(res);
    void IResourceHolder.RemoveResources(IDisposable res) => _disposable.Remove(res);

    public void Dispose() => _disposable.Dispose();

    async void IBinderControllable.Register(string key, IControlBindable bindable, IUIObject affectedPart)
    {
        if (_model == null)
            throw new InvalidOperationException("Mode is Not set");

        try
        {
            var model = await GetModel();

            lock (_registrations)
            {
                var registration = new Registration(bindable.Bind(new ComponentUIObject(this, null), affectedPart, model), bindable);
                _registrations[key] = registration;
                _disposable.Add(registration.Binding);
            }
        }
        catch (Exception e)
        {
  
        }
    }

    void IBinderControllable.CleanUp(string key)
    {
        if (!_registrations.Remove(key, out var registration)) return;
        
        _disposable.Remove(registration.Binding);
        registration.Binding.Dispose();
    }

    private async Task<IViewModel<TModel>> GetModel()
    {
        lock (_registrations)
        {
            if (_model == null)
            {
                _model = _lifetimeScope.Resolve<IViewModel<TModel>>();
            }
        }

        await ModelLoaded.InvokeAsync(_model);
        return _model;
    }

    private sealed record Registration(IDisposable Binding, IControlBindable Binder);

}
